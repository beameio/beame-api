#!/usr/bin/env ngs

# NGS language - https://github.com/ilyash/ngs/

# ---------- Environment sanity checks ----------

assert('BEAME_INTERNAL_AUTH_SERVER_FQDN' in ENV, 'Environment variable BEAME_INTERNAL_AUTH_SERVER_FQDN must be set')

if 'BEAME_DIR' in ENV {
	throw Error("BEAME_DIR environment variable must be unset for tests")
}

HOME = ENV.HOME

BEAME_DIR = HOME / '.beame'
BEAME_BIN = '../../src/cli/beame.js'
if not(File(BEAME_BIN)) {
   die("Could not find beame binary. Please make sure you are running this script from the tests/cli_tests directory")
}
BEAME_AUTH_FQDN = ENV.get('BEAME_AUTH_FQDN', 'n6ge8i9q4b4b5vb6.h40d7vrwir2oxlnn.v1.d.beameio.net')

if Path(BEAME_DIR) {
	throw Error("Beame directory exists ($BEAME_DIR). Will not run tests.")
}

# ---------- Environment setup ----------

{ ENV['SNI_SERVER_PORT'] = '0' }

# ---------- Tests "framework" ----------

TEST_DATA = 'abcd0123~!@#'
for(i;100) TEST_DATA="${TEST_DATA}xyz"

CREDS_FILE = "/tmp/beame-cli-test-creds-${time()}"

exit_code = 0

# ---------- Tests library ----------

doc Copies Beame test requests signing credential into store for L0 entity creation
F copy_to_store() {
	$(cp -a "$HOME/$BEAME_AUTH_FQDN" "$HOME/.beame/v2/$BEAME_AUTH_FQDN")
	'Copied'
}

doc Creates token needed for signing request for level 0 entity
F create_token() {
	global token = ``$BEAME_BIN token create --fqdn $BEAME_AUTH_FQDN --data NONE --format json``
	assert_string(token, "Token is a string")
	TestMessage(token)
}

doc Emulate site registration
F register_on_site() {
	global registration = ``curl -s -X POST -H "X-BeameAuthToken: $token" "https://${ENV.BEAME_INTERNAL_AUTH_SERVER_FQDN}/test/sdk/register" -d "email=$entity_email&name=$entity_name"``
	assert_hash(registration, "Registration must be hash")
	'authToken' not in registration throws TestFail("Registration has no authToken")
	registration
}

doc Creates an entity
F create_entity() {
	entity = ``$BEAME_BIN creds getCreds --token ${registration.authToken.encode_json()} --format json``
	entity is not Hash throws TestFail("Entity must be hash, not '$entity'")
	entity.get('parent_fqdn', null) throws TestFail("Entity has parent FQDN: ${entity.parent_fqdn}")
	entity.level != 0 throws TestFail("Entity has non-zero level: ${entity.level}")
	entity.email != entity_email throws TestFail("Entity email mismatch")
	entity.name != entity_name throws TestFail("Entity name mismatch")
	entities.push(entity)
	entity
}

F prepare_entity_properties() {
	global entity_name = "sdk-test-${time()}"
	global entity_email = "$entity_name@example.com"
	global child_entity_name = "${entity_name}-child"
	global child_entity_email = "$child_entity_name@example.com"
}

doc Tests running site
F test_server(fqdn:Str, cmd:CommandsPipeline, url:Str) {
	threads = [
		Thread({
			try {
				$($cmd)
			} catch(e:ProcessFail) {
				# We are expecting the process to be killed
				guard e.process.exit_signal
				null
			}
		})
	]
	assert_resolvable(fqdn)

	addr = retry(
		times = 45
		sleep = 2
		title = "Check that host ${fqdn} is resolvable",
        body = { `dig "+short" $fqdn`.lines() }
        fail_cb = { throw TestFail("$title: no resolve for $fqdn").set('host', fqdn) }
    )[-1]

	# curl was unable to resolve the host so had to manually give curl the IP
	ret = try `curl -vvv --max-time 30 --resolve "${fqdn}:443:${addr}" $url`
	$(pkill -f 'beame.js servers')
	threads.join()
	assert_string(ret, "Failed to fetch response from the server")
	ret
}

doc Waits till hostname becomes resolvable (has DNS record)
F test_dns(fqdn:Str) {

    test("Change DNS to A record") with {
    	ip = '10.' + (rand.partial(256) * 3).map(Str).join(".")
    	$($BEAME_BIN creds setDns --fqdn $fqdn --value $ip --format json)
    	assert_resolvable(fqdn, check={A == [ip]})
    }

    test("Change DNS to CNAME record") with {
    	cname = CHARS::ascii_lowercase.rand(16) + '.example.com'
    	$($BEAME_BIN creds setDns --fqdn $fqdn --value $cname --format json)
    	assert_resolvable(fqdn,sleep=5, check={"${cname}." in A})
    }

    test("Delete DNS record") with {
    	deleted_fqdn = ``$BEAME_BIN creds deleteDns --fqdn $fqdn --format json``
    	assert_eq(deleted_fqdn,fqdn,"Deleted fqdn matched to requested")
    }

}

doc Test decrypt json
F test_decrypt_json(encrypted_data:Str){
test("Decrypt data / json", {
	dec = ``$BEAME_BIN creds decrypt --encryptedData $encrypted_data``
	dec != TEST_DATA throws TestFail("Decrypted data is not the same as the original data")
	"Decryped data was same as the original data"
})
}

doc Test decrypt text
F test_decrypt_text(encrypted_data:Str){
    test("Decrypt data / text", {
    	dec = ``$BEAME_BIN creds decrypt --encryptedData $encrypted_data``
    	dec != TEST_DATA throws TestFail("Decrypted data is not the same as the original data")
    	"Decryped data was same as the original data"
    })
}

# ---------- Tests ----------

F finished_ok(p:Process) {
	guard p.command.argv == [BEAME_BIN]
	p.exit_code == 1
}

entities = []
registration = null

test("Run without arguments", {
	out = `$BEAME_BIN`
	'beame.js creds list' not in out throws TestFail("Expected text not found")
	"OK"
})
test("Copy $BEAME_AUTH_FQDN into store", copy_to_store)

n_entities = 2
for(i;n_entities) {
	prepare_entity_properties()
	test("[entity ${i+1}/$n_entities] Create token for an entity", create_token)
	test("[entity ${i+1}/$n_entities] Emulate site registration", register_on_site)
	test("[entity ${i+1}/$n_entities] Create test entity", create_entity);
}

encrypted_data = null

test("Encrypt data / json", {
	global encrypted_data = `$BEAME_BIN creds encrypt --data $TEST_DATA --targetFqdn ${entities[0].fqdn} --format json`
	enc = encrypted_data.decode()
	enc.assert_hash_keys(%[rsaCipheredKeys data encryptedFor], "Encrypted data hash keys")
	enc.encryptedFor != entities[0].fqdn throws TestFail("encryptedFor mismatch")
	enc
})

test_decrypt_json(encrypted_data)

test("Encrypt and sign data / json", {
	global encrypted_data = `$BEAME_BIN creds encrypt --data $TEST_DATA --targetFqdn ${entities[0].fqdn} --signingFqdn ${entities[0].fqdn} --format json`
	enc = encrypted_data.decode()
	enc.assert_hash_keys(%[signedData signedBy signature], "Encrypted data hash keys")
	enc.signedData.encryptedFor != entities[0].fqdn throws TestFail("encryptedFor mismatch")
	enc
})

test_decrypt_json(encrypted_data)


encrypted_data = null

test("Encrypt data / text", {
	global encrypted_data = `$BEAME_BIN creds encrypt --data $TEST_DATA --targetFqdn ${entities[0].fqdn}`
	encrypted_data
})

test_decrypt_text(encrypted_data)

test("Encrypt and sign data / text", {
	global encrypted_data = `$BEAME_BIN creds encrypt --data $TEST_DATA --targetFqdn ${entities[0].fqdn} --signingFqdn ${entities[0].fqdn}`
	encrypted_data
})

test_decrypt_text(encrypted_data)

data_with_signature = null
bad_data_with_signature = null
test("Sign data / json", {
	global data_with_signature = `$BEAME_BIN creds sign --data $TEST_DATA --fqdn ${entities[0].fqdn} --format json`
	sig = data_with_signature.decode_json()
	sig.assert_hash_keys(%[signedData signature signedBy], "Signature hash keys")
	global bad_data_with_signature = {'signedData': "${TEST_DATA}xyz", 'signature': sig.signature, 'signedBy': sig.signedBy}.encode_json()
	sig
})

test("Check good signature / json", {
	chk = ``$BEAME_BIN creds checkSignature --signedData $data_with_signature --format json``
	chk !== true throws TestFail("Good signature check did not return true but '$chk'")
	chk
})
test("Check good signature for tampered data / json", {
	chk = ``$BEAME_BIN creds checkSignature --signedData $bad_data_with_signature --format json``
	chk !== false throws TestFail("Good signature check did not return false for tampered data but '$chk'")
	chk
})

data_with_signature = null
bad_data_with_signature = null
test("Sign data / text", {
	global data_with_signature = `$BEAME_BIN creds sign --data $TEST_DATA --fqdn ${entities[0].fqdn}`
	data_with_signature.limit(50, '...')
})

if data_with_signature {
	test("Check good signature / text", {
		chk = `$BEAME_BIN creds checkSignature --signedData $data_with_signature` - MaybeSfx('\n')
		chk != 'GOOD SIGNATURE' throws TestFail("Good signature check did not return 'GOOD SIGNATURE' but '$chk'")
		chk
	})
}

test("Export credentials", {
	ENV.get('SKIP_EXPORT', false) returns "SKIPPED"
	exp = ``$BEAME_BIN creds exportCredentials --fqdn ${entities[0].fqdn} --targetFqdn ${entities[1].fqdn} --file $CREDS_FILE``
	exp is not Str throws TestFail("exportCredentials did not return a string but '$exp'")
	exp != CREDS_FILE throws TestFail("exportCredentials returned '$exp', not the expected file $CREDS_FILE")
	exp
})

F test_creds_exist() {
	ls = ``$BEAME_BIN creds list --regex ${entities[0].fqdn} --format json``
	ls is not Arr throws TestFail("Creds list did not return an array")
	ls.len() != 1 throws TestFail("Creds list length is not 1")
	ls[0].metadata.fqdn != entities[0].fqdn throws TestFail("Creds list returned the wrong item")
	"Credentials for ${entities[0].fqdn} exist"
}
test("[Import credentials] Test credentials exist before deleting them", test_creds_exist)
test("[Import credentials] Deleting exported credentials", {
	$($BEAME_BIN creds shred --fqdn ${entities[0].fqdn})
	"deleted"
})
test("[Import credentials] Test credentials do not exist before importing", {
	ls = ``$BEAME_BIN creds list --regex ${entities[0].fqdn} --format json``
	ls is not Arr throws TestFail("Creds list did not return an array")
	ls.len() != 0 throws TestFail("Creds list length is not 0")
	"Credentials for ${entities[0].fqdn} do not exist"
})
test("[Import credentials] Import", {
	imp = ``$BEAME_BIN creds importCredentials --file $CREDS_FILE``
	imp is not Bool throws TestFail("Import result must be a boolean, not '$imp'")
	not(imp) throws TestFail("Import did not return true")
	imp
})
test("[Import credentials] Test credentials exist after import", test_creds_exist)

# TODO: add checks
test("[Registration token] Generate") do {
	global reg_token = `$BEAME_BIN creds getRegToken --fqdn ${entities[0].fqdn} --name $child_entity_name --email $child_entity_email`
	assert(reg_token, "Registration token should be non-empty string")
}

test("[Registration token] Use") do {
	child_entity = ``$BEAME_BIN creds getCreds --regToken $reg_token --format json``
	expected = {
		'parent_fqdn': entities[0].fqdn
		'level': entities[0].level + 1
		'name': child_entity_name
		'email': child_entity_email
	}
	assert_hash_keys_values(child_entity, expected, "Correct values in child_entity")
}

test("S3 credentials", {
	results = entities.fqdn.map(F(fqdn) {
		echo("  Checking $fqdn")
		url = "https://beameio-net-certs-dev.s3.amazonaws.com/${entities[0].fqdn}/x509.pem"
		try {
			$(curl -m 5 -s $url)
			true
		} catch(pf:ProcessFail) {
			false
		}
	})
	oks = results.count()
	oks < results.len() throws TestFail("Only $oks out of ${results.len()} certificates are present in S3")
	"All $oks certificates present in S3"
})

test("Hello world server", {
	result = test_server(entities[0].fqdn, %($BEAME_BIN servers runHelloWorldServer --fqdn ${entities[0].fqdn}), "https://${entities[0].fqdn}/")
	'hello world' not in result throws TestFail("Hello world server did not return 'hello world'")
	"Hello world server is OK"
})

test("File server", {
	result = test_server(entities[0].fqdn, %($BEAME_BIN servers runStaticServer --fqdn ${entities[0].fqdn}), "https://${entities[0].fqdn}/photo1.jpg")
	result != `cat "../../examples/public/shared/photo1.jpg"` throws TestFail("File server failed to serve correct /photo1.jpg")
	"File server is OK"
})

if Path(CREDS_FILE) {
	echo("+ Removing temporary credentials file $CREDS_FILE")
	$(rm $CREDS_FILE)
}

test("Renew", {
	$($BEAME_BIN creds renewCert --fqdn ${entities[0].fqdn} --format json)
	"OK"
})

test("OCSP test") with {
	s = ``$BEAME_BIN creds checkOcsp --fqdn ${entities[1].fqdn} --format json``
	assert_eq(s, 'Good', "Ocsp status ${entities[1].fqdn} is OK")
}

test_dns(entities[1].fqdn)

test("Revoke", {
	# TODO: Add status=ok in the program
	s = ``$BEAME_BIN creds revokeCert --signerFqdn ${entities[1].fqdn} --fqdn ${entities[1].fqdn} --format json``
	s.assert_hash_keys(%[message])
	assert('Certificate has been revoked successfully' in s.message)
})

test("OCSP test after revocation") with {
	s = ``$BEAME_BIN creds checkOcsp --fqdn ${entities[1].fqdn} --format json``
    assert_eq(s, 'Bad', "Ocsp status ${entities[1].fqdn} revoked")
}

test("Credentials chain - nested credentials using 'creds getCreds --fqdn'", {
	$(./testGetCredsFqdn.ngs ${entities[0].fqdn} 3)
})

test("importLiveCredentials", {
	$($BEAME_BIN creds importLiveCredentials --fqdn google.com)
	``$BEAME_BIN creds list --format json``.none({A.metadata.fqdn == "*.google.com"}) throws TestFail("importLiveCredentials failed")
})

echo("All tests done. Exit code: $exit_code")
{ exit_code }
